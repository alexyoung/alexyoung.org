---
layout: post
title: "What SCUMM Can Teach Programmers"
summary: "I'm a huge fan of the LucasArts graphic adventure games. I've been reading up on the history of the company in Rogue Leaders: The Story of LucasArts, and I noticed that some of the success of these games was credited to the SCUMM game engine."
categories: 
- programming
- languages
- games
- retro-archaeology
---

I'm a huge fan of the LucasArts graphic adventure games.  I've been reading up on the history of the company in <a href="http://www.amazon.com/gp/product/0811861848/ref=as_li_ss_tl?ie=UTF8&tag=da07e-20&linkCode=as2&camp=217145&creative=399349&creativeASIN=0811861848">Rogue Leaders: The Story of LucasArts</a><img src="http://www.assoc-amazon.com/e/ir?t=&l=as2&o=1&a=0811861848&camp=217145&creative=399349" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />, and I noticed that some of the success of these games was credited to the SCUMM game engine.

<img src="/images/monkey_1.png" alt="Monkey Island Concept Art" style="float: left; margin-right: 20px; margin-bottom: 20px" />

bq. It became clear to me that I was never going to complete Maniac Mansion writing the whole thing in 6502 assembly language.
<p style="margin-left: 40px">- Ron Gilbert</p>

Thanks to this game engine, numerous key gaming franchises owe at least part of their success to a scripting language.  The _Rogue Leaders_ book mentions that at the time Maniac Mansion was developed, the developers wanted to remove the burden of working with assembly language so they created what sounds suspiciously like a programming language and virtual machine.  Big budget games are typically developed with lower-level languages like C and C++ (although there are <a href="#fn1">exceptions</a>), but back in the 80s assembly would have been more common.

This all makes me wonder how important SCUMM was to the success of LucasArts.  There's no reason why a scripting language shouldn't be used for an adventure game -- developers can be left to focus on being creative within the game world rather than worrying about technical details.  This has parallels with web development, where manipulating text and high-level protocols are important and we're focused on satisfying business and usability goals rather than low-level technical details.

h3. The Language

<img src="/images/monkey_2.png" alt="Monkey Island Concept Art" style="float: right; margin-left: 20px" />

As a programmer I've always wanted to know what SCUMM was like.  I was born in the wrong time and place to be a "Scummlet", and although "ScummVM":http://www.scummvm.org/ is an amazing piece of work it doesn't reveal what real SCUMM scripts were like (it does have detailed documentation on the opcodes though).  Fortunately, Ron Gilbert gave a talk that revealed some fragments of the language at GDC, entitled "Classic Game Postmortem - MANIAC MANSION":http://www.gdcvault.com/play/1014732/Classic-Game-Postmortem-MANIAC.  In this talk the following scripts are revealed:

{% highlight text %}
script clock-tick {
    do {
        clock-state = not clock-state
        object living-room-clock state clock-state
        play-sound clock-tick
        break-here 60
    }
}
{% endhighlight %}

And:

{% highlight text %}
cut-scene {
    ...
    actor nurse-edna in-room edna-bedroom at 60,20
    camera-follow nurse-edna
    actor nurse-edna walk-to 30,20
    wait-for-actor nurse-edna
    say-line nurse-edna "WHATS'S YOUR POINT ED!!!"
    wait-for-talking nurse-edna
    ...
}
{% endhighlight %}

If these are indeed real SCUMM scripts then it looks like:

* It's superficially C-like: assignment with <code>=</code>, curly brackets, etc.
* <code>script</code> looks like a function
* There are coroutines, probably implemented with green threads
* Each line seems to be a tuple of pairs with <code>object noun</code> or <code>verb noun</code> (these are implemented as opcodes)
* There may be some Lisp influence, Ron Gilbert mentions he was looking at Lisp then wanted to make something more C-like (with help from Chip Morningstar)

h3. In Modern Terms

This language is best described as a DSL -- although functions like <code>actor</code> are implemented as opcodes in the VM rather than libraries built on a core language (Ron mentions this, and see "actorFollowCamera ($79)":http://wiki.scummvm.org/index.php/SCUMM/V6_opcodes#actorFollowCamera_.28.2479.29 in ScummVM).  Perhaps a DSL for assembly language?

We don't know what the core language's reserved words were, and it's obvious from ScummVM that the language changed a lot over the years.  It seems to have some interesting ideas and it was definitely way ahead of its time.  Remember, the first SCUMM game came out in 1987 for the Commodore 64.

We can learn a lot from SCUMM.  It doesn't look like a "pure" language, it actually seems messy. But it was ported to many platforms, and it was used to create entertaining games that sold millions of copies.  It makes me remember that the best tool for the job shouldn't just be technically excellent, it should also be able to cater for a developer's creativity.

<h3 class="footnote" id="fn1"><sup>1</sup> The Exceptions</h3>

I've seen GOAL mentioned a few times anecdotally, so I was interested to see this Lisp runtime mentioned in a "Hacker News comment":http://news.ycombinator.com/item?id=2475639:

bq. As far as I know, the games we did at Naughty Dog (Crash 1-3, Jak 1-3 + X), and later Uncharted were the only major console games which large amounts of runtime Lisp. The Jak & Daxter series was 99% written in my Scheme dialect GOAL, including all the assembly. The only parts that weren't were libs talking to Sony's libraries (C++).

There are high-level simplified examples of GOAL in "Postmortem: Naughty Dog's Jak and Daxter":http://www.gamasutra.com/view/feature/2985/postmortem_naughty_dogs_jak_and_.php?page=2, and echoes of SCUMM:

bq. There are other major compiler advantages: a unified set of assembly op-codes consistent across all five processors of the Playstation 2, register coloring when writing assembly code, and the ability to intermix assembly instructions seamlessly with higher-level code. Outer loops could be written as "slower" higher-level code, while inner loops could be optimized assembly.

h3. References

* <a href="http://www.amazon.com/gp/product/0811861848/ref=as_li_ss_tl?ie=UTF8&tag=da07e-20&linkCode=as2&camp=217145&creative=399349&creativeASIN=0811861848">Rogue Leaders: The Story of LucasArts</a><img src="http://www.assoc-amazon.com/e/ir?t=&l=as2&o=1&a=0811861848&camp=217145&creative=399349" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
* "Ron Gilbert's GDC Talk Video":http://www.gdcvault.com/play/1014732/Classic-Game-Postmortem-MANIAC
* "ScummVM Language Documentation":http://wiki.scummvm.org/index.php/SCUMM
* "Text Adventure Samples":http://secretgeek.net/text_adventure_samples.asp
* "Game Script Decompiler":http://wiki.scummvm.org/index.php/OpenTasks/Tools/Game_script_decompiler
* "Postmortem: Naughty Dog's Jak and Daxter":http://www.gamasutra.com/view/feature/2985/postmortem_naughty_dogs_jak_and_.php
* Images: "Steve Purcell's blog":http://spudvisionblog.blogspot.com/
